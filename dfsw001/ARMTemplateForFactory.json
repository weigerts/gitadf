{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfsw001"
		},
		"Abs_zilliant_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Abs_zilliant'"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_ls'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase_ls_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_ls'"
		},
		"AzureSqldemo_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqldemo'"
		},
		"LS_adventureworks_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_adventureworks'"
		},
		"Salesforce_Homolog_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Salesforce_Homolog'"
		},
		"Salesforce_Homolog_securityToken": {
			"type": "secureString",
			"metadata": "Secure string for 'securityToken' of 'Salesforce_Homolog'"
		},
		"Sftp Zilliant DEV_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Sftp Zilliant DEV'"
		},
		"ls_Sql_brwcl007_02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_Sql_brwcl007_02'"
		},
		"ls_advworksblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_advworksblob'"
		},
		"ls_azuredtl_folder1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azuredtl_folder1'"
		},
		"ls_blob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_blob'"
		},
		"ls_brws0090_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_brws0090'"
		},
		"ls_brws0090_sellout_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_brws0090_sellout'"
		},
		"ls_datalab_brws0361_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_datalab_brws0361'"
		},
		"ls_dbsup01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_dbsup01'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=svrsup01.database.windows.net;Initial Catalog=dbsup01;User ID=weigesan"
		},
		"ls_formula1dl_storage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_formula1dl_storage'"
		},
		"ls_gfk_br_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_gfk_br'"
		},
		"ls_mergedb_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_mergedb'"
		},
		"ls_sqldb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqldb1'"
		},
		"ls_sqlserverdrjoe_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_sqlserverdrjoe'"
		},
		"ls_supplier00_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_supplier00'"
		},
		"ls_supplierinfo_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_supplierinfo'"
		},
		"ls_supplierinfo_03_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'ls_supplierinfo_03'"
		},
		"ls_ud_datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ls_ud_datalake'"
		},
		"ls_ud_dbdemosw01_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_dbdemosw01'"
		},
		"ls_ud_dbdemosw02_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_dbdemosw02'"
		},
		"ls_ud_destination_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_destination'"
		},
		"ls_ud_processed_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_processed'"
		},
		"ls_ud_raw_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_raw'"
		},
		"ls_ud_source_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_source'"
		},
		"ls_ud_sqlserver_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_ud_sqlserver'"
		},
		"wwimporters_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'wwimporters'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://elxa3dtlsw001.dfs.core.windows.net/"
		},
		"AzureDatabricks1_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0518-134833-soz5v67"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KV-SW002.vault.azure.net/"
		},
		"Salesforce_Homolog_properties_typeProperties_environmentUrl": {
			"type": "string",
			"defaultValue": "https://electroluxla--homolog.sandbox.my.salesforce.com/"
		},
		"Salesforce_Homolog_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "svc-sensidia@electrolux.com.homolog"
		},
		"Sftp Zilliant DEV_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "eu1-ftp-dev.zilliant.com"
		},
		"Sftp Zilliant DEV_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "electrolux.dev"
		},
		"ls_formula1dl_storage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://elxa3dtlsw001.dfs.core.windows.net"
		},
		"ls_gfk_br_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://www.gfkcr.com.br:1024/gfk_elux_files"
		},
		"ls_gfk_br_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "elux"
		},
		"ls_http_github_step2c_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://github.com"
		},
		"ls_supplier00_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sipolatti-supplierinfo-api.azurewebsites.net/v1/filial"
		},
		"ls_supplier00_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "electrolux"
		},
		"ls_supplierinfo_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://sipolatti-supplierinfo-api.azurewebsites.net/v1/filial/',linkedService().param_ls_cnpj,'/movimento?DataInicial=',linkedService().pdatai,'&DataFinal=',linkedService().pdataf)}"
		},
		"ls_supplierinfo_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "electrolux"
		},
		"ls_supplierinfo_03_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('https://sipolatti-supplierinfo-api.azurewebsites.net/v1/filial/',linkedService().param_cnpj,'/estoque?Data=',linkedService().param_data)}"
		},
		"ls_supplierinfo_03_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "electrolux"
		},
		"ls_ud_datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://elxa3dtlsw001.dfs.core.windows.net/"
		},
		"tr_process_formula1_properties_pipeline_parameters_p_windows_end_date": {
			"type": "string",
			"defaultValue": "@trigger().outputs.WindowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Demo Exemplo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup year",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqldemo",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup year').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data from sql to datalake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@int(item().year)",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqldemo",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_azuredatalake_csv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqldemo')]",
				"[concat(variables('factoryId'), '/datasets/ds_azuredatalake_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelloutMensal_daysofstock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "calculates days of stock per customer per product",
				"activities": [
					{
						"name": "sellout_daysofstock",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/ShoppingBrasilDiario.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "with\n\ttabela as (\n\t\tselect \n\t\t'competitors_sellout_monthly' as Origin,\n\t\tcast(Periodo as date) as Date,\n\t\tRegional as Regiao,\n\t\tSupervisor + Modelo as chave,\n\t\tBandeira as Seller,\n\t\t--null as MeioDeDivulgacao,\n\t\tMarca as Brand,\n\t\tGrupoProduto as Product_Group,\n\t\tModelo as Product,\n\t\t'Days of Stock' as KPI, \n\t\tTotalVenda as Value,\n\t\tPosicaoEstoque\n\t\tfrom DatalabBrasil.dbo.SelloutMensal_EluxInfo smei\n\t\twhere\n\t\t\tisnull(TotalVenda, 0) > 0\n\t\t\tand isnull(PosicaoEstoque, 0) >= 0 \n\t\t\tand Periodo between dateadd(month, -2, current_timestamp) and dateadd(month, 1, current_timestamp)\n\t\t\t--and Periodo >= dateadd(month, -2, current_timestamp)\n\t),\n\trank as (\n\t\tselect \n\t\t\trank () over (partition by Chave order by Date asc) as ranking,\n\t\t\tDate,\n\t\t\tchave,\n\t\t\tValue,\n\t\t\tPosicaoEstoque\n\t\tfrom tabela\n\t)\n\tselect \n\t\ttabela.Origin,\n\t\ttabela.Date,\n\t\ttabela.Regiao,\n\t\ttabela.Seller,\n\t\tnull as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\ttabela.Brand,\n\t\ttabela.Product_Group,\n\t\ttabela.Product,\n\t\tnull as Product_LCM,\n\t\tnull as Corte_LCM,\n\t\tnull as Tracking_Model_LCM,\n\t\ttabela.KPI, \n\t\t--tabela.Value,\n\t\t--case when coalesce (r.posicaoestoque, 0) = 0 and coalesce(r2.posicaoestoque, 0) > 0 then 1 else 0 end as flag,\n\t\tcast((r2.posicaoestoque / r.value) as float) as Value \n\tfrom rank r\n\tleft join tabela on tabela.chave = r.chave\n\tleft join rank r2 on r.chave = r2.chave and r.ranking = r2.ranking + 1\n--\tleft join competitors on r2.chave = competitors.chave and r2.Periodo = competitors.Date\n\twhere \n\t\tcase when coalesce (r.posicaoestoque, 0) = 0 and coalesce(r2.posicaoestoque, 0) > 0 then 1 else 0 end = 1",
								"queryTimeout": "00:30:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": true
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": "Regiao",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "Seller",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "MeioDeDivulgacao",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "Product_LCM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "Corte_LCM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"name": "Tracking_Model_LCM",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_sellout_stocksales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T14:06:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_sellout_stocksales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelloutMensal_stock_sales')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This task uploads the data from ShoppingBrasilDiario from D-1. ",
				"activities": [
					{
						"name": "sellout_stocksales",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/ShoppingBrasilDiario.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "\tselect --top(100000)\n\t\t'competitors_sellout_monthly' as Origin,\n\t\tcast(Periodo as date) as Date,\n\t\tRegional as Regiao,\n\t\tBandeira as Seller,\n\t\tSupervisor as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\tMarca as Brand,\n\t\tGrupoProduto as Product_Group,\n\t\tModelo as Product,\n\t\tnull as Product_LCM,\n\t\tnull as Corte_LCM,\n\t\tnull as Tracking_Model_LCM,\n\t\t'Stock' as KPI, \n\t\tPosicaoEstoque as Value\n\tfrom DatalabBrasilDW.dbo.SelloutMensal_EluxInfo smei \n\twhere 1=1\n\t\tand Periodo >= dateadd(month,-24,current_timestamp)\n\t--order by 2 desc\n\t\tand PosicaoEstoque <> ''\nunion all\n\tselect --top(10)\n\t\t'competitors_sellout_monthly' as Origin,\n\t\tcast(Periodo as date) as Date,\n\t\tRegional as Regiao,\n\t\tBandeira as Seller,\n\t\tSupervisor as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\tMarca as Brand,\n\t\tGrupoProduto as Product_Group,\n\t\tModelo as Product,\n\t\tnull as Product_LCM,\n\t\tnull as Corte_LCM,\n\t\tnull as Tracking_Model_LCM,\n\t\t'Sales Units' as KPI, \n\t\tTotalVenda as Value\n\tfrom DatalabBrasilDW.dbo.SelloutMensal_EluxInfo smei \n\twhere 1=1\n\t\tand Periodo >= dateadd(month,-24,current_timestamp)\n\torder by 2 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": true
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Origin",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime"
										},
										"sink": {
											"type": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": "Regiao",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "Seller",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "MeioDeDivulgacao",
											"type": "Int32"
										},
										"sink": {
											"type": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "Product_Group",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "Product_LCM",
											"type": "Int32"
										},
										"sink": {
											"type": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "Corte_LCM",
											"type": "Int32"
										},
										"sink": {
											"type": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"name": "Tracking_Model_LCM",
											"type": "Int32"
										},
										"sink": {
											"type": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String"
										},
										"sink": {
											"type": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Int32"
										},
										"sink": {
											"type": "String",
											"ordinal": 14
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_sellout_stocksales",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-02-21T14:04:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_sellout_stocksales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Until file Exist')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until file exist",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('fileexist')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata country",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_ud_raw",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition file exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata country",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata country').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileexist",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileexist": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T18:30:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/advworkswwimergepi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "advworkswwimergedf",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "advworkswwimergedf",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"advworksdbsource": {},
									"wwimportsdbsource": {},
									"wwimporterscolorsource": {},
									"advworkscheckmodel": {},
									"wwimportersgetinvoiceevents": {},
									"MergeDBProductsSink": {},
									"mergedbclothesink": {},
									"advworksblobsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/advworkswwimergedf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_avd_demo01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_28i",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SalesLT.Customer"
							},
							{
								"name": "Destination",
								"value": "advworkssinkcontainer//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_28i",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_28i",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 120
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceDataset_28i')]",
				"[concat(variables('factoryId'), '/datasets/DestinationDataset_28i')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/for each demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup year",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ud_sqlserver",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup year').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data sql to datalake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@int(item().year)",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ud_sqlserver",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "Ds_ud_azuredatalakecsv",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T16:57:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_sqlserver')]",
				"[concat(variables('factoryId'), '/datasets/Ds_ud_azuredatalakecsv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/get Metadata Demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Of Country CSV",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ud_sqlserver",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"columnCount",
								"structure"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T13:23:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_sqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": true
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_src_zilliant",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_sftp_zilliant",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-27T19:01:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_src_zilliant')]",
				"[concat(variables('factoryId'), '/datasets/ds_sftp_zilliant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_ingest_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Details",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_formula1_raw",
								"type": "DatasetReference",
								"parameters": {
									"p_window_end_date": {
										"value": "@pipeline().parameters.p_windows_end_date",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If folder exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Folder Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Folder Details').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Ingest circuits file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/1.Ingest_circuits_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Races file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/2.Ingest_races_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Constructors file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/3.Ingest_constructors_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Results file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/5.Ingest_results_file - 2 maneira",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Lap_times file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/7.Ingest_lap_times_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Pit_Stops file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/6.Ingest_pit_stops_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Drivers file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/4.Ingest_drivers_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Ingest Qualifying file",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/Ingestion/8.Ingest_qualifying_file",
										"baseParameters": {
											"p_data_source": {
												"value": "@variables('V_data_source')",
												"type": "Expression"
											},
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_windows_end_date": {
						"type": "string"
					}
				},
				"variables": {
					"V_data_source": {
						"type": "String",
						"defaultValue": "Ergast"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_formula1_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_process_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute ingestion Ppl",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_ingest_formula1_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_windows_end_date": {
									"value": "@pipeline().parameters.p_windows_end_date",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Trans Ppl",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute ingestion Ppl",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_transform_formula1_data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"p_windows_end_date": {
									"value": "@pipeline().parameters.p_windows_end_date",
									"type": "Expression"
								}
							}
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_windows_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_ingest_formula1_data')]",
				"[concat(variables('factoryId'), '/pipelines/pl_transform_formula1_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_transform_formula1_data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Folder Details",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_formula1_raw",
								"type": "DatasetReference",
								"parameters": {
									"p_window_end_date": {
										"value": "@pipeline().parameters.p_windows_end_date",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "JsonReadSettings"
							}
						}
					},
					{
						"name": "If folder exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Folder Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Get Folder Details').output.exists",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Trans race results",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/trans/1.race_results",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans drivers standings",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Trans race results",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/trans/2.driver_standings",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans constructor standings",
									"type": "DatabricksNotebook",
									"dependsOn": [
										{
											"activity": "Trans race results",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/trans/3.constructor_standings",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Trans calculated race results",
									"type": "DatabricksNotebook",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"notebookPath": "/Users/adm-weigesan@electrolux.com/Learning/trans/4.calculated_race_results",
										"baseParameters": {
											"p_file_date": {
												"value": "@formatDateTime(pipeline().parameters.p_windows_end_date,'yyyy-MM-dd')",
												"type": "Expression"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureDatabricks1",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_windows_end_date": {
						"type": "string"
					}
				},
				"variables": {
					"V_data_source": {
						"type": "String",
						"defaultValue": "Ergast"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T17:49:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_formula1_raw')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_copy_from_parquet_to_salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SalesforceSink",
								"writeBatchSize": 5000,
								"writeBehavior": "upsert",
								"externalIdFieldName": "azure",
								"ignoreNullValues": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet_Salesforce",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Sales_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-06T14:42:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet_Salesforce')]",
				"[concat(variables('factoryId'), '/datasets/Sales_Data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_copy_from_salesforce')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SalesforceSource",
								"readBehavior": "query"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Sales_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet_Salesforce",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-09-06T14:42:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Sales_Data')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Salesforce')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_datalab')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select top(2)'SellOut_Info' as Origin,cast(Periodo as date) as Date,Regional as Regiao,Bandeira as Seller,'-' as MeioDeDivulgacao,Marca as Brand,GrupoProduto as Product_Group,Modelo as Product,'-' as Product_LCM,'-' as Corte_LCM,'-' as Tracking_Model_LCM,'Sales Units' as KPI,TotalVenda as Value from DatalabBrasilDW.dbo.SelloutMensal_EluxInfo smei where 1=1 and Periodo >= dateadd(month,-24,current_timestamp)",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_datalab",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_azuredatalake_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-02T17:53:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_datalab')]",
				"[concat(variables('factoryId'), '/datasets/ds_azuredatalake_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_gfk')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": "files.json"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_gfk_br",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_gfkbr",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-17T14:44:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_gfk_br')]",
				"[concat(variables('factoryId'), '/datasets/ds_gfkbr')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_gfkbrazil_monthly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "competitors_gfkbrazil_monthly",
						"description": "queries the monthly gfk from datalab (temporarily)",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \n\t\t'competitors_gfkbrazil_monthly' as Origin,\n\t\t'BR10' as Sales_Org,\n\t\tcast(gm.[Periodo] as date) as Date,\n\t\tgm.Tipo as Region,\n\t\tnull as Seller,\n\t\tnull as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\tgm.MarcaGFK as Brand,\n\t\tgm.GrupoProdutoGFK as Product_Group,\n\t\tgm.Modelo  as Product,\n\t\tdgl.Item_LCM as Product_LCM,\n\t\tdgl.Corte_LCM as Corte_LCM,\n\t\tdgl.Tracking_Model_LCM as Tracking_Model_LCM,\n\t\tgm.[KPI] as KPI,\n\t\tround(gm.[Value], 5) as Value\n\tfrom DatalabBrasilDW.dbo.GfkBrasilMensal gm\n\tleft join DatalabBrasil.dbo.DP_GFKBrasil_LCM dgl on dgl.Item_GFK = gm.Modelo \n\twhere 1=1\n\t\tand gm.KPI in ('Sales Units', 'Sales Value', 'Sales Value BRL ', 'Unw. Avg. Distribution Total', 'Wgt. Avg. Distribution Total')\n\t\tand gm.MarcaGFK not in ('<Tradebrand & Exclusive>')\n\t\tand gm.Modelo not in ('Trade Model') -- modelo especifico mas que não é aberto a marca do fabricante\n\t\t--and gm.[Pais] = 'Brazil'\n\t\tand Periodo >= dateadd(month, -6, CURRENT_TIMESTAMP)\n\t\tand gm.Tipo in ('Internet', 'Traditional', '<Grand Total>')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Seller",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Seller",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "5NO",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MeioDeDivulgacao",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MeioDeDivulgacao",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Brand",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "KPI",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Value",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_gfkbrazil_monthly",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T11:37:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_gfkbrazil_monthly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_gfkbrazil_weekly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "queries the weekly gfk brazil temporarily from datalabbrasil",
				"activities": [
					{
						"name": "gfkbrazil_weekly",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "\n\tselect top(10000)\n\t\t'competitors_gfkbrazil_weekly' as Origin, \n\t\t'BR10' as Sales_Org,\n\t\tcast(gs.[DtSemana] as date) as Date,\n\t\tTipo as Region,\n\t\tnull as Seller,\n\t\tnull as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\tgs.MarcaGFK  as Brand,\n\t\tgs.GrupoProdutoGFK  as Product_Group,\n\t\tgs.Modelo as Product,\n\t\tdgl.Item_LCM as Product_LCM,\n\t\tdgl.Corte_LCM as Corte_LCM,\n\t\tdgl.Tracking_Model_LCM as Tracking_Model_LCM,\n\t\t[KPI] as KPI, \n\t\tround(gs.[Value], 5) as Value\n\tfrom DatalabBrasilDW.dbo.GfkBrasilSemanal as gs\n\tleft join DatalabBrasil.dbo.DP_GFKBrasil_LCM dgl on dgl.Item_GFK = gs.Modelo \n\twhere 1=1\n\t\tand gs.KPI in ('Sales Units', 'Sales Value', 'Sales Value BRL ', 'Unw. Avg. Distribution Total', 'Wgt. Avg. Distribution Total')\n\t\tand gs.MarcaGFK not in ('<Tradebrand & Exclusive>')\n\t\tand gs.[Pais] = 'Brazil'\n\t\tand cast(gs.[DtSemana] as date) >= dateadd(month, -3, CURRENT_TIMESTAMP)\n\t\t--and gs.Tipo in ('Internet', 'Traditional', '<Grand Total>')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Seller",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Seller",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "5NO",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MeioDeDivulgacao",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MeioDeDivulgacao",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Brand",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "KPI",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Value",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_gfkbrazil_weekly",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T13:26:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_gfkbrazil_weekly')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_shoppingbrasildiario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Daily data refresh for ShoppingBrasilMensal and SelloutMensal tables.",
				"activities": [
					{
						"name": "ShoppingBrasilDiario",
						"description": "SQL query that brings the last 24 months of ShoppingBrasilDIario data to Zilliant SFTP.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/ShoppingBrasilMensal"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "with rn as(\nselect \n\t\tROW_NUMBER() OVER( PARTITION BY [DataInicial], [UF], [Marca], [Categoria], [Modelo] ORDER BY [Modelo] ASC) as a,\n\t    'competitors_shoppingbrasil_daily' as Origin,\n\t    'BR10' as Sales_Org,\n\t\tcast([DataInicial] as date) as Date,\t    \n\t\tUF as Region,\n\t\tLoja as Seller,\n\t\tnull as '5NO',\n\t\tVeiculo as MeioDeDivulgacao,\n\t    [Marca] as Brand,\n\t    [Categoria] as Product_Group,\n\t    Modelo as Product,\n\t    null as Product_LCM,\n\t    null as Corte_LCM, \n\t    null as Tracking_Model_LCM, \n\t    'Price BRL' as KPI,\n\t    PrecoAVista as 'Value'\n\tfrom DatalabBrasilDW.dbo.ShoppingBrasilDiario sbd \n\twhere 1=1\n\t\tand [DataInicial] >= dateadd(month, -6, CURRENT_TIMESTAMP)\n\t\t)\n\tselect origin, sales_org, date, region, seller, null as '5NO', meiodedivulgacao, brand, product_group, product, product_lcm, corte_lcm, tracking_model_lcm, kpi, value from rn\n\twhere rn.a = 1",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_shopbrasildiario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T11:35:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_shopbrasildiario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_shoppingbrasilmensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Monthly data refresh for ShoppingBrasilMensal and SelloutMensal tables.",
				"activities": [
					{
						"name": "ShoppingBrasilMensal",
						"description": "SQL query that brings the last 24 months of ShoppingBrasilMensal data to Zilliant SFTP.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/competitors_shoppingbrasilmensal.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "with rn as(\nselect \n\t\tROW_NUMBER() OVER( PARTITION BY [Periodo], [UF], [Marca], [Categoria], [Modelo] ORDER BY [Modelo] ASC) as a,\n\t    'competitors_shoppingbrasil_monthly' as Origin,\n\t    'BR10' as Sales_Org,\n\t\tcast(Periodo as date) as Date,\t    \n\t\tUF as Region,\n\t\tLoja as Seller,\n\t\tnull as '5NO',\n\t\tVeiculo as MeioDeDivulgacao,\n\t    [Marca] as Brand,\n\t    [Categoria] as Product_Group,\n\t    Modelo  as Product,\n\t    null as Product_LCM,\n\t    null as Corte_LCM, \n\t    null as Tracking_Model_LCM, \n\t    'Sales Value BRL' as KPI,\n\t\tMenorPrecoAvista as Value\n\tfrom DatalabBrasilDW.dbo.ShoppingBrasilMensal sbm\n\twhere 1=1\n\t\tand Periodo >= dateadd(month, -3, CURRENT_TIMESTAMP)\n\t\t)\n\tselect origin, sales_org, date, region, seller, null as '5NO', meiodedivulgacao, brand, product_group, product, product_lcm, corte_lcm, tracking_model_lcm, kpi, value from rn\n\twhere rn.a = 1",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "origin",
											"type": "String"
										},
										"sink": {
											"name": "origin",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_org",
											"type": "String"
										},
										"sink": {
											"name": "sales_org",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime"
										},
										"sink": {
											"name": "date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String"
										},
										"sink": {
											"name": "region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "seller",
											"type": "String"
										},
										"sink": {
											"name": "seller",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32"
										},
										"sink": {
											"name": "5NO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "meiodedivulgacao",
											"type": "String"
										},
										"sink": {
											"name": "meiodedivulgacao",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "brand",
											"type": "String"
										},
										"sink": {
											"name": "brand",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_group",
											"type": "String"
										},
										"sink": {
											"name": "product_group",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product",
											"type": "String"
										},
										"sink": {
											"name": "product",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "product_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "corte_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "corte_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "tracking_model_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "tracking_model_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "kpi",
											"type": "String"
										},
										"sink": {
											"name": "kpi",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "value",
											"type": "Double"
										},
										"sink": {
											"name": "value",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_shopbrasilmensal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T11:39:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DatalabBrasil')]",
				"[concat(variables('factoryId'), '/datasets/Destination_shopbrasilmensal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_shopprecos_drjoe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "1_get_auth_token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://accounts.zoho.com/oauth/v2/token?refresh_token=1000.1b14c960f7218a4e5cd5e8a12d4bfd75.b8610a30d6281b724b01b0611053c476&client_id=1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG&client_secret=3a78e3f381e490262e5e685486880277a4d7540fac&grant_type=refresh_token",
							"method": "POST",
							"headers": {},
							"body": {
								"access_token": "1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG",
								"api_domain": "https://www.zohoapis.com",
								"token_type": "Bearer",
								"expires_in": 3600
							}
						}
					},
					{
						"name": "3_create_export_jobid",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "2_auth_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://analyticsapi.zoho.com/restapi/v2/bulk/workspaces/1006245000000010001/views/1006245000009380551/data",
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Zoho-oauthtoken ', variables('access_token'))",
									"type": "Expression"
								},
								"responseFormat": "json",
								"ZANALYTICS-ORGID": "67471564",
								"criteria": "\\\"SHP - Integração BI\\\".\\\"Data Coleta\\\"='02-03-2023'"
							},
							"body": {
								"access_token": "1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG",
								"api_domain": "https://www.zohoapis.com",
								"token_type": "Bearer",
								"expires_in": 3600
							}
						}
					},
					{
						"name": "2_auth_token",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "1_get_auth_token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "access_token",
							"value": {
								"value": "@activity('1_get_auth_token').output.access_token",
								"type": "Expression"
							}
						}
					},
					{
						"name": "4_jobID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "3_create_export_jobid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "jobID",
							"value": {
								"value": "@activity('3_create_export_jobid').output.data.jobId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "5_create_download_url",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "4_jobID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://analyticsapi.zoho.com/restapi/v2/bulk/workspaces/1006245000000010001/exportjobs/', variables('jobID'))",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Zoho-oauthtoken ', variables('access_token'))",
									"type": "Expression"
								},
								"responseFormat": "json",
								"ZANALYTICS-ORGID": "67471564",
								"criteria": "\\\"SHP - Integração BI\\\".\\\"Data Coleta\\\"='02-03-2023'"
							},
							"body": {
								"access_token": "1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG",
								"api_domain": "https://www.zohoapis.com",
								"token_type": "Bearer",
								"expires_in": 3600
							}
						}
					},
					{
						"name": "6_download_files",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat('https://analyticsapi.zoho.com/restapi/v2/bulk/workspaces/1006245000000010001/exportjobs/', variables('jobID'), '/data')",
								"type": "Expression"
							},
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "@concat('Zoho-oauthtoken ', variables('access_token'), '/data')",
									"type": "Expression"
								},
								"responseFormat": "json",
								"ZANALYTICS-ORGID": "67471564",
								"criteria": "\\\"SHP - Integração BI\\\".\\\"Data Coleta\\\"='02-03-2023'"
							},
							"body": {
								"access_token": "1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG",
								"api_domain": "https://www.zohoapis.com",
								"token_type": "Bearer",
								"expires_in": 3600
							},
							"datasets": [
								{
									"referenceName": "ds_drjoe01",
									"type": "DatasetReference",
									"parameters": {}
								}
							]
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "5_create_download_url",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 120
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"access_token": {
						"type": "String"
					},
					"jobID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T11:58:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_drjoe01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sipolatti')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get cnpj",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_sup01",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "get movimento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get cnpj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_sup02",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "get estoque",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get cnpj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_supestoque",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-24T17:00:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppl_sup01')]",
				"[concat(variables('factoryId'), '/pipelines/ppl_sup02')]",
				"[concat(variables('factoryId'), '/pipelines/ppl_supestoque')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sup01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfsup01",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_sup01",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcapisup1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-01T17:26:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_sup01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sup02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select cnpj from [sup01].[filiais]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_sup01_filiais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "dfsup02",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dfsup02",
											"type": "DataFlowReference",
											"parameters": {
												"pdatai": {
													"value": "'@{formatDateTime(subtractFromTime(utcNow(),60,'Day'),'yyyy-MM-dd')}'",
													"type": "Expression"
												},
												"pdataf": {
													"value": "'@{formatDateTime(subtractFromTime(utcNow(),1,'Day'),'yyyy-MM-dd')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"srcsup02": {
													"cnpj": {
														"value": "@item().cnpj",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime1",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"cnpj": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-03T19:39:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_sup01_filiais')]",
				"[concat(variables('factoryId'), '/dataflows/dfsup02')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_supestoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select cnpj from [sup01].[filiais]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_sup01_filiais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Dfsupestoque",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dfsupestoque",
											"type": "DataFlowReference",
											"parameters": {
												"dfpcnpj": {
													"value": "'@{item().cnpj}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"srcsupestoque": {
													"cnpj": {
														"value": "@item().cnpj",
														"type": "Expression"
													}
												},
												"sinkestoque": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T18:46:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Azure_sup01_filiais')]",
				"[concat(variables('factoryId'), '/dataflows/dfsupestoque')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_token_based_rest_api')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/authaccount/login",
							"method": "POST",
							"headers": {},
							"body": {
								"email": "weigesan@gmail.com",
								"password": 123456
							}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Web1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "http://restapi.adequateshop.com/api/users?page=1",
							"method": "GET",
							"headers": {
								"Authorization": {
									"value": "Bearer @{activity('Web1').output.data.Token}",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-27T16:21:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_token_based_rest_api_dr_joe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://accounts.zoho.com/oauth/v2/token",
							"method": "POST",
							"headers": {
								"refresh_token": "1000.1b14c960f7218a4e5cd5e8a12d4bfd75.b8610a30d6281b724b01b0611053c476",
								"client_id": "1000.6FDGAEOMQ15CT978CCOU1V0GK3BLNG",
								"client_secret": "3a78e3f381e490262e5e685486880277a4d7540fac",
								"grant_type": "refresh_token"
							},
							"body": {
								"access_token": "1000.5bb58770bc552f67183b9547778c11fd.0bb78faff51a5864b908b31c2dd16a4b",
								"api_domain": "https://www.zohoapis.com",
								"token_type": "Bearer",
								"expires_in": 3600
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-03T17:40:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_copydata_fromgit_todatalake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from http to datalake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ud_input_csvdata_git",
								"type": "DatasetReference",
								"parameters": {
									"prelativegiturl": {
										"value": "@pipeline().parameters.psourcerelativeurl",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ud_git_csv",
								"type": "DatasetReference",
								"parameters": {
									"pfilename": {
										"value": "@pipeline().parameters.pfilename",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"psourcerelativeurl": {
						"type": "string"
					},
					"pfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-21T19:14:15Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_input_csvdata_git')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_git_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_demo_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for filename",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_ud_listoffiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach filename",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for filename",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for filename').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "set relativeurl",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "relativeurl",
										"value": {
											"value": "@item().SourceRelativeURL",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable filename",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "set relativeurl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "filename",
										"value": {
											"value": "@item().FileName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Copy data from http to datalake",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable filename",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_ud_input_csvdata_git",
											"type": "DatasetReference",
											"parameters": {
												"prelativegiturl": {
													"value": "@variables('relativeurl')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ud_git_csv",
											"type": "DatasetReference",
											"parameters": {
												"pfilename": {
													"value": "@variables('filename')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"relativeurl": {
						"type": "String"
					},
					"filename": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-21T19:45:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_listoffiles')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_input_csvdata_git')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_git_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_demodataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_example",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecustom": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T18:31:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ud_example')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_df_demo2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_demo2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecustomer": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T19:05:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ud_demo2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_full_load_template')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data full load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ud_dbdemosw01_tbluser",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ud_dbdemosw02",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-07T19:29:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw01_tbluser')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_get_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata Folder",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_ud_raw",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"itemName",
								"itemType",
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach files",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata Folder').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata File",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_ud_files",
											"type": "DatasetReference",
											"parameters": {
												"pFilename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"lastModified",
											"structure",
											"itemType"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition File Size",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata File",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('Get Metadata File').output.size,200)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Delete file",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "ds_ud_files",
														"type": "DatasetReference",
														"parameters": {
															"pFilename": {
																"value": "@item().name",
																"type": "Expression"
															}
														}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Wait true",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 2
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-02T19:41:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_incremental_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy new and changed files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@addDays(utcnow(),-2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ud_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ud_destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-06T19:49:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_source')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_incremental_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get last modified Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select [LastLoadDate] as LastLoadDate\nfrom tblControl",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ud_dbdemosw01_table_control",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Get max modified date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "Select max([Last_m]) as Last_m\nfrom tbluser",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_ud_dbdemosw01_tbluser",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get last modified Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get max modified date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from tbluser\nwhere Last_m <=\n'@{activity('Get max modified date').output.firstRow.Last_m}'\nand Last_m >\n'@{activity('Get last modified Date').output.firstRow.LastLoadDate}'\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ud_dbdemosw01_tbluser",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ud_dbdemosw02",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "update control table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SPUpdateLoadInfo]",
							"storedProcedureParameters": {
								"ModifiedDate": {
									"value": {
										"value": "@{activity('Get max modified date').output.firstRow.Last_m}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": "tbluser",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ls_ud_dbdemosw01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T12:57:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw01_table_control')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw01_tbluser')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw02')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_dbdemosw01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_paymentDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_paymentDetails",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_payment_details",
								"type": "DataFlowReference",
								"parameters": {
									"pminage": {
										"value": "@pipeline().parameters.minage",
										"type": "Expression"
									},
									"pmaxage": {
										"value": "@pipeline().parameters.maxage",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceCustomers": {},
									"sourcePayments": {},
									"sourceOrders": {},
									"sinkPaymentDetails": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"minage": {
						"type": "int"
					},
					"maxage": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T18:47:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ud_payment_details')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_scd_type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_scd_type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcedata": {},
									"destinationData": {},
									"sinkData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T13:54:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_ud_scd_type1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ud until demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until time",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(utcnow(),'3/3/2023, 5:44:20 PM')\n",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-03T17:42:06Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/until demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until true",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(utcnow(),'Nov 30, 2022, 6:15:54 pm'\n)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait1",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 30
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var1",
							"value": {
								"value": "@formatDateTime(subtractFromTime(utcnow(),30,'Day'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable1_copy1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "var1",
							"value": {
								"value": "@formatDateTime(subtractFromTime(utcnow(),1,'Day'),'yyyy-MM-dd')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"var1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-01T18:57:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/until example')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Until file exist",
				"activities": [
					{
						"name": "Until file exist",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('fileexist')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata country",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText1",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition file exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata country",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata country').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait 30 seconds",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 30
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable file exist",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "fileexist",
													"value": true
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"fileexist": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-30T19:26:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AdventureWorksProducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_adventureworks",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ProductID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "ProductNumber",
						"type": "nvarchar"
					},
					{
						"name": "MakeFlag",
						"type": "bit"
					},
					{
						"name": "FinishedGoodsFlag",
						"type": "bit"
					},
					{
						"name": "Color",
						"type": "nvarchar"
					},
					{
						"name": "SafetyStockLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "ReorderPoint",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "StandardCost",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "ListPrice",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "SizeUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "WeightUnitMeasureCode",
						"type": "nchar"
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 8,
						"scale": 2
					},
					{
						"name": "DaysToManufacture",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductLine",
						"type": "nchar"
					},
					{
						"name": "Class",
						"type": "nchar"
					},
					{
						"name": "Style",
						"type": "nchar"
					},
					{
						"name": "ProductSubcategoryID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ProductModelID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SellStartDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SellEndDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DiscontinuedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "Production",
					"table": "Product"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_adventureworks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dbsup01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "data_documento",
						"type": "date"
					},
					{
						"name": "data_venda",
						"type": "date"
					},
					{
						"name": "direcao_movimento",
						"type": "int",
						"precision": 10
					},
					{
						"name": "documento_estornado",
						"type": "nvarchar"
					},
					{
						"name": "moeda",
						"type": "nvarchar"
					},
					{
						"name": "nota_fiscal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "numero_documento",
						"type": "int",
						"precision": 10
					},
					{
						"name": "preco_interno",
						"type": "float",
						"precision": 15
					},
					{
						"name": "quantidade_ordem",
						"type": "nvarchar"
					},
					{
						"name": "serie_fiscal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sku_id",
						"type": "nvarchar"
					},
					{
						"name": "tipo_documento",
						"type": "int",
						"precision": 10
					},
					{
						"name": "tipo_pessoa",
						"type": "nvarchar"
					},
					{
						"name": "valor_bruto",
						"type": "float",
						"precision": 15
					},
					{
						"name": "valor_liquido",
						"type": "float",
						"precision": 15
					},
					{
						"name": "venda_online",
						"type": "nvarchar"
					},
					{
						"name": "cnpj",
						"type": "varchar"
					},
					{
						"name": "ean_principal",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sup01",
					"table": "movimento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dbsup01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_sup03')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cnpj",
						"type": "varchar"
					},
					{
						"name": "ean_principal",
						"type": "varchar"
					},
					{
						"name": "deposito",
						"type": "varchar"
					},
					{
						"name": "parceiro",
						"type": "int",
						"precision": 10
					},
					{
						"name": "quantidade",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sku_id",
						"type": "varchar"
					},
					{
						"name": "data_movimento",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "sup01",
					"table": "estoque"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqldemo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqldemo",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Invoice_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Cust_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Year",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product",
						"type": "varchar"
					},
					{
						"name": "Sales",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Sales_Details"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqldemo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure_sup01_filiais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dbsup01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "codigo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cnpj",
						"type": "varchar"
					},
					{
						"name": "bairro",
						"type": "varchar"
					},
					{
						"name": "cep",
						"type": "varchar"
					},
					{
						"name": "cidade",
						"type": "varchar"
					},
					{
						"name": "complemento",
						"type": "varchar"
					},
					{
						"name": "domicilio_fiscal",
						"type": "varchar"
					},
					{
						"name": "logradouro",
						"type": "varchar"
					},
					{
						"name": "numero",
						"type": "varchar"
					},
					{
						"name": "razao_social",
						"type": "varchar"
					},
					{
						"name": "uf",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sup01",
					"table": "filiais"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dbsup01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DatalabBrasil')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_datalab_brws0361",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_datalab_brws0361')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText_customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer.csv",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationDataset_28i')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "advworkssinkcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_gfkbrazil_monthly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dev_zilliant_destination"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "competitors_gfkbrazil_monthly.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_gfkbrazil_weekly')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dev_zilliant_destination"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "competitors_gfkbrazil_weekly.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_sellout_stocksales')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dev_zilliant_destination"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "sellout_stocksales.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_shopbrasildiario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dev_zilliant_destination"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "competitors_shoppingbrasildiario.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Destination_shopbrasilmensal')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "dev_zilliant_destination"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "competitors_shoppingbrasilmensal.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ds_ud_azuredatalakecsv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@concat('Sales_in',item().year,'.csv')",
							"type": "Expression"
						},
						"folderPath": "output",
						"fileSystem": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Salesforce')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Product2.parquet",
						"container": "salesforce"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sales_Data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Salesforce_Homolog",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": "Product2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Salesforce_Homolog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_28i')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqldb1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NameStyle",
						"type": "bit"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "FirstName",
						"type": "nvarchar"
					},
					{
						"name": "MiddleName",
						"type": "nvarchar"
					},
					{
						"name": "LastName",
						"type": "nvarchar"
					},
					{
						"name": "Suffix",
						"type": "nvarchar"
					},
					{
						"name": "CompanyName",
						"type": "nvarchar"
					},
					{
						"name": "SalesPerson",
						"type": "nvarchar"
					},
					{
						"name": "EmailAddress",
						"type": "nvarchar"
					},
					{
						"name": "Phone",
						"type": "nvarchar"
					},
					{
						"name": "PasswordHash",
						"type": "varchar"
					},
					{
						"name": "PasswordSalt",
						"type": "varchar"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqldb1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceDataset_52z')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Sql_brwcl007_02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Sql_brwcl007_02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_ls",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Address_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Sales_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "sup01",
					"table": "movimento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_ls')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DatalabBrasil')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_brws0090",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schemaName": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"tableName": {
						"type": "string",
						"defaultValue": "SelloutMensal_EluxInfo"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_brws0090')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_advworksblob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_advworksblob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "advworkswwi"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_advworksblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azuredatalake_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "datalab.csv",
						"fileSystem": "datalab"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_csv_file_1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuredtl_folder1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "File_1.csv",
						"folderPath": "folder1",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuredtl_folder1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_datalab')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_Sql_brwcl007_02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_Sql_brwcl007_02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_drjoe01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_sqlserverdrjoe",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "data_coleta",
						"type": "varchar"
					},
					{
						"name": "loja",
						"type": "varchar"
					},
					{
						"name": "rede",
						"type": "varchar"
					},
					{
						"name": "regiao",
						"type": "varchar"
					},
					{
						"name": "regional",
						"type": "varchar"
					},
					{
						"name": "demonstrador",
						"type": "varchar"
					},
					{
						"name": "modelo",
						"type": "varchar"
					},
					{
						"name": "marca",
						"type": "varchar"
					},
					{
						"name": "categoria",
						"type": "varchar"
					},
					{
						"name": "subcategoria",
						"type": "varchar"
					},
					{
						"name": "subcategoria2",
						"type": "varchar"
					},
					{
						"name": "capacidade",
						"type": "varchar"
					},
					{
						"name": "preco_praticado",
						"type": "varchar"
					},
					{
						"name": "negocio",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "drjoe",
					"table": "movimento"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_sqlserverdrjoe')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dtl_sup01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "cnpj",
						"fileSystem": "sup01"
					},
					"columnDelimiter": ",",
					"compressionCodec": "snappy",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_formula1_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_formula1dl_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "formatDateTime(@dataset().p_window_end_date,'yyyy-MM-dd')",
							"type": "Expression"
						},
						"fileSystem": "raw"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"constructorId": {
							"type": "integer"
						},
						"constructorRef": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"nationality": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_formula1dl_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gfk_br')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_gfk_br",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_gfk_br')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gfkbr')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuredtl_folder1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "gfkbr"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuredtl_folder1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_gfkbr_parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuredtl_folder1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "gfkbr.parquet",
						"container": "gfkbr"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuredtl_folder1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_json_sup01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "sup01"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_mergedbclothes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mergedb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "clothes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mergedb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_mergedbproducts')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_mergedb",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Products"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_mergedb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sftp_zilliant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Sftp Zilliant DEV",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "competitors_gfkbrazil_monthly.csv",
						"folderPath": "/INPUT"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Sftp Zilliant DEV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src_zilliant')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Abs_zilliant",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "exchange_rate_test.csv.csv",
						"container": "zilliant"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Abs_zilliant')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sup01')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_supplier00",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_supplier00')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sup02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_supplierinfo",
					"type": "LinkedServiceReference",
					"parameters": {
						"param_ls_cnpj": {
							"value": "@dataset().cnpj",
							"type": "Expression"
						},
						"pdatai": {
							"value": "@formatDateTime(subtractFromTime(utcNow(),60,'Day'),'yyyy-MM-dd')",
							"type": "Expression"
						},
						"pdataf": {
							"value": "@formatDateTime(subtractFromTime(utcNow(),1,'Day'),'yyyy-MM-dd')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"cnpj": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_supplierinfo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sup03')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_supplierinfo_03",
					"type": "LinkedServiceReference",
					"parameters": {
						"param_cnpj": {
							"value": "@dataset().cnpj",
							"type": "Expression"
						},
						"param_data": {
							"value": "@formatDateTime(subtractFromTime(utcNow(),1,'Day'),'yyyy-MM-dd')",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"cnpj": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_supplierinfo_03')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_txt_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azuredtl_folder1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "folder1",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azuredtl_folder1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_dbdemosw01_table_control')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_dbdemosw01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "LastLoadDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblControl"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_dbdemosw01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_dbdemosw01_tbluser')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_dbdemosw01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tbluser"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_dbdemosw01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_dbdemosw02')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_dbdemosw02",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Phone",
						"type": "varchar"
					},
					{
						"name": "Last_m",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "userData"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_dbdemosw02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "result",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_raw",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pFilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().pFilename",
							"type": "Expression"
						},
						"folderPath": "raw",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_git_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_destination",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pfilename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().pfilename",
							"type": "Expression"
						},
						"folderPath": "csv",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_input_csvdata_git')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_http_github_step2c",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"prelativegiturl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().prelativegiturl",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_http_github_step2c')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_listoffiles')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_destination",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ListOfFiles.csv",
						"folderPath": "config",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "No",
						"type": "String"
					},
					{
						"name": "FullURL",
						"type": "String"
					},
					{
						"name": "BaseURL",
						"type": "String"
					},
					{
						"name": "SourceRelativeURL",
						"type": "String"
					},
					{
						"name": "FileName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_processed')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_processed",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "processed",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_raw')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_raw",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customers.csv",
						"folderPath": "raw",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_sc73')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customers.csv",
						"folderPath": "sec73",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Customerslastname",
						"type": "String"
					},
					{
						"name": "Customersfirstname",
						"type": "String"
					},
					{
						"name": "CustomersCountry",
						"type": "String"
					},
					{
						"name": "Customersage",
						"type": "String"
					},
					{
						"name": "Customersgender",
						"type": "String"
					},
					{
						"name": "Customersemail",
						"type": "String"
					},
					{
						"name": "Customersprofession",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_sec73_orders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Orders.csv",
						"folderPath": "sec73",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Store_id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_sec73_payments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Payments.csv",
						"folderPath": "sec73",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "payment_id",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "descriptions",
						"type": "String"
					},
					{
						"name": "pDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Details",
						"type": "String"
					},
					{
						"name": "Total_Invoice",
						"type": "String"
					},
					{
						"name": "Due_Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_sec73_sinc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_processed",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "sec73",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_source",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "udemyadf"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Id",
						"type": "String"
					},
					{
						"name": "Sales",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_source')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ud_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_ud_sqlserver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "SalesLT",
					"table": "Customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_sqlserver')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_wwimportersstockitems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "wwimporters",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "StockItemID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "StockItemName",
						"type": "nvarchar"
					},
					{
						"name": "SupplierID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ColorID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UnitPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OuterPackageID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Brand",
						"type": "nvarchar"
					},
					{
						"name": "Size",
						"type": "nvarchar"
					},
					{
						"name": "LeadTimeDays",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QuantityPerOuter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IsChillerStock",
						"type": "bit"
					},
					{
						"name": "Barcode",
						"type": "nvarchar"
					},
					{
						"name": "TaxRate",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "UnitPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "RecommendedRetailPrice",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "TypicalWeightPerUnit",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "MarketingComments",
						"type": "nvarchar"
					},
					{
						"name": "InternalComments",
						"type": "nvarchar"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "CustomFields",
						"type": "nvarchar"
					},
					{
						"name": "Tags",
						"type": "nvarchar"
					},
					{
						"name": "SearchDetails",
						"type": "nvarchar"
					},
					{
						"name": "LastEditedBy",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ValidFrom",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "ValidTo",
						"type": "datetime2",
						"scale": 7
					}
				],
				"typeProperties": {
					"schema": "Warehouse",
					"table": "StockItems"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/wwimporters')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/filiais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_dbsup01",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "codigo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cnpj",
						"type": "varchar"
					},
					{
						"name": "bairro",
						"type": "varchar"
					},
					{
						"name": "cep",
						"type": "varchar"
					},
					{
						"name": "cidade",
						"type": "varchar"
					},
					{
						"name": "complemento",
						"type": "varchar"
					},
					{
						"name": "domicilio_fiscal",
						"type": "varchar"
					},
					{
						"name": "logradouro",
						"type": "varchar"
					},
					{
						"name": "numero",
						"type": "varchar"
					},
					{
						"name": "razao_social",
						"type": "varchar"
					},
					{
						"name": "uf",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "sup01",
					"table": "filiais"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_dbsup01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Abs_zilliant')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Abs_zilliant_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-8384718081778057.17.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "databricks",
						"secretVersion": "7b66cf0b343d455bbeda67f2f03e4997"
					},
					"existingClusterId": "[parameters('AzureDatabricks1_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_ls')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_ls_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqldemo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqldemo_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_adventureworks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_adventureworks_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Salesforce_Homolog')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Salesforce",
				"typeProperties": {
					"environmentUrl": "[parameters('Salesforce_Homolog_properties_typeProperties_environmentUrl')]",
					"username": "[parameters('Salesforce_Homolog_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Salesforce_Homolog_password')]"
					},
					"securityToken": {
						"type": "SecureString",
						"value": "[parameters('Salesforce_Homolog_securityToken')]"
					},
					"apiVersion": "54.0"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sftp Zilliant DEV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('Sftp Zilliant DEV_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Sftp Zilliant DEV_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Sftp Zilliant DEV_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_Sql_brwcl007_02')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_Sql_brwcl007_02_connectionString')]"
				},
				"connectVia": {
					"referenceName": "brws0360",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/brws0360')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_advworksblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_advworksblob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_azuredtl_folder1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_azuredtl_folder1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_blob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_brws0090')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_brws0090_connectionString')]"
				},
				"connectVia": {
					"referenceName": "brws0360",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/brws0360')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_brws0090_sellout')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_brws0090_sellout_connectionString')]"
				},
				"connectVia": {
					"referenceName": "brws0360",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/brws0360')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_datalab_brws0361')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_datalab_brws0361_connectionString')]"
				},
				"connectVia": {
					"referenceName": "brws0361",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/brws0361')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_dbsup01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_dbsup01_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "dbpwd"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_formula1dl_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_formula1dl_storage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_formula1dl_storage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_gfk_br')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_gfk_br_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_gfk_br_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_gfk_br_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_http_github_step2c')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('ls_http_github_step2c_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_mergedb')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_mergedb_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqldb1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqldb1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_sqlserverdrjoe')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_sqlserverdrjoe_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_supplier00')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_supplier00_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_supplier00_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_supplier00_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_supplierinfo')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"param_ls_cnpj": {
						"type": "string"
					},
					"pdatai": {
						"type": "string",
						"defaultValue": "vdatai"
					},
					"pdataf": {
						"type": "string",
						"defaultValue": "vdataf"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_supplierinfo_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_supplierinfo_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_supplierinfo_password')]"
					}
				},
				"connectVia": {
					"referenceName": "integrationRuntime1",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/integrationRuntime1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_supplierinfo_03')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"param_cnpj": {
						"type": "string",
						"defaultValue": "30689848000130"
					},
					"param_data": {
						"type": "string",
						"defaultValue": "2023-01-08"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_supplierinfo_03_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('ls_supplierinfo_03_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('ls_supplierinfo_03_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_ud_datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ls_ud_datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_dbdemosw01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_dbdemosw01_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_dbdemosw02')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_dbdemosw02_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_destination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_destination_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_processed')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_processed_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_raw')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_raw_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_source')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_source_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_ud_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_ud_sqlserver_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/wwimporters')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('wwimporters_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_Daily')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-02-03T14:27:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								12
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trigger_Monthly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Month",
						"interval": 1,
						"startTime": "2023-02-03T14:30:00Z",
						"timeZone": "UTC",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								12
							],
							"monthDays": [
								5
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_process_formula1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_process_formula1_data",
						"type": "PipelineReference"
					},
					"parameters": {
						"p_windows_end_date": "[parameters('tr_process_formula1_properties_pipeline_parameters_p_windows_end_date')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 168,
					"startTime": "2022-05-22T10:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_process_formula1_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger Sipolati')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ppl_sipolatti",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2023-02-06T04:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppl_sipolatti')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/brws0360')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/brws0361')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime1')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "MemoryOptimized",
							"coreCount": 32,
							"timeToLive": 10,
							"cleanup": false
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/advworkswwimergedf')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AdventureWorksProducts",
								"type": "DatasetReference"
							},
							"name": "advworksdbsource"
						},
						{
							"dataset": {
								"referenceName": "ds_wwimportersstockitems",
								"type": "DatasetReference"
							},
							"name": "wwimportsdbsource"
						},
						{
							"dataset": {
								"referenceName": "ds_wwimportersstockitems",
								"type": "DatasetReference"
							},
							"name": "wwimporterscolorsource"
						},
						{
							"dataset": {
								"referenceName": "AdventureWorksProducts",
								"type": "DatasetReference"
							},
							"name": "advworkscheckmodel"
						},
						{
							"dataset": {
								"referenceName": "ds_wwimportersstockitems",
								"type": "DatasetReference"
							},
							"name": "wwimportersgetinvoiceevents"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_mergedbproducts",
								"type": "DatasetReference"
							},
							"name": "MergeDBProductsSink"
						},
						{
							"dataset": {
								"referenceName": "ds_mergedbclothes",
								"type": "DatasetReference"
							},
							"name": "mergedbclothesink"
						},
						{
							"dataset": {
								"referenceName": "ds_advworksblob",
								"type": "DatasetReference"
							},
							"name": "advworksblobsink"
						}
					],
					"transformations": [
						{
							"name": "sortbyname"
						},
						{
							"name": "filterdiscontinued"
						},
						{
							"name": "derivedfinalcostandproducttype"
						},
						{
							"name": "derivedproducttype"
						},
						{
							"name": "selectadvworkscolumns"
						},
						{
							"name": "selectwwimporterscolumns"
						},
						{
							"name": "wwimporterscolorslookup"
						},
						{
							"name": "advworkssplitclothesfromproducts"
						},
						{
							"name": "wwimporterssplitclothesfromproducts"
						},
						{
							"name": "checkrepeatedclothes"
						},
						{
							"name": "unionallclothes"
						},
						{
							"name": "unionallproducts"
						},
						{
							"name": "joinmodel"
						},
						{
							"name": "aggregatebyproductmodelname"
						},
						{
							"name": "rankbyavgprice"
						},
						{
							"name": "addpkclothes"
						},
						{
							"name": "addpkproducts"
						},
						{
							"name": "AlterRow1"
						},
						{
							"name": "deriveprofitability"
						},
						{
							"name": "windowclothes"
						},
						{
							"name": "parsejsoncolumn"
						},
						{
							"name": "flattenevents"
						},
						{
							"name": "parsejsonevents"
						},
						{
							"name": "pivoteventdates"
						},
						{
							"name": "derivecomplexsubcolumns"
						},
						{
							"name": "MapDriftedeventdates",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "unpivoteventdates"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          MakeFlag as boolean,",
						"          FinishedGoodsFlag as boolean,",
						"          Color as string,",
						"          SafetyStockLevel as integer,",
						"          ReorderPoint as integer,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          SizeUnitMeasureCode as string,",
						"          WeightUnitMeasureCode as string,",
						"          Weight as decimal(8,2),",
						"          DaysToManufacture as integer,",
						"          ProductLine as string,",
						"          Class as string,",
						"          Style as string,",
						"          ProductSubcategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table',",
						"     partitionBy('roundRobin', 2)) ~> advworksdbsource",
						"source(output(",
						"          StockItemID as integer,",
						"          StockItemName as string,",
						"          SupplierID as integer,",
						"          ColorID as integer,",
						"          UnitPackageID as integer,",
						"          OuterPackageID as integer,",
						"          Brand as string,",
						"          Size as string,",
						"          LeadTimeDays as integer,",
						"          QuantityPerOuter as integer,",
						"          IsChillerStock as boolean,",
						"          Barcode as string,",
						"          TaxRate as decimal(18,3),",
						"          UnitPrice as decimal(18,2),",
						"          RecommendedRetailPrice as decimal(18,2),",
						"          TypicalWeightPerUnit as decimal(18,3),",
						"          MarketingComments as string,",
						"          InternalComments as string,",
						"          Photo as binary,",
						"          CustomFields as string,",
						"          Tags as string,",
						"          SearchDetails as string,",
						"          LastEditedBy as integer,",
						"          ValidFrom as timestamp,",
						"          ValidTo as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> wwimportsdbsource",
						"source(output(",
						"          ColorID as integer,",
						"          Color as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ColorID,ColorName as Color from Warehouse.Colors',",
						"     format: 'query') ~> wwimporterscolorsource",
						"source(output(",
						"          ProductModelID as integer,",
						"          ProductModelName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select ProductModelID, Name as ProductModelName from Production.ProductModel',",
						"     format: 'query') ~> advworkscheckmodel",
						"source(output(",
						"          InvoiceID as integer,",
						"          ReturnedDeliveryData as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select InvoiceID, [ReturnedDeliveryData] from [Sales].[Invoices]',",
						"     format: 'query') ~> wwimportersgetinvoiceevents",
						"wwimportsdbsource sort(asc(StockItemName, true),",
						"     caseInsensitive: true) ~> sortbyname",
						"advworksdbsource filter(isNull(SellEndDate)) ~> filterdiscontinued",
						"sortbyname derive(cost = UnitPrice*(1+(TaxRate/100)),",
						"          itemType = case(\r",
						"    in(['S','M','L','3XL','3XS','4XL','5XL','6XL','7XL','XS','XXS','XL','XXL'],Size)\r",
						"    ,'Clothing','Product'\r",
						")) ~> derivedfinalcostandproducttype",
						"selectadvworkscolumns derive(itemType = case(\r",
						"    in(['S','M','L','XL'],Size)\r",
						"    ,'Clothing','Product'\r",
						")) ~> derivedproducttype",
						"joinmodel select(mapColumn(",
						"          Name,",
						"          Color,",
						"          Cost = StandardCost,",
						"          RetailPrice = ListPrice,",
						"          Size",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectadvworkscolumns",
						"wwimporterscolorslookup select(mapColumn(",
						"          Name = StockItemName,",
						"          ColorID = Color,",
						"          cost,",
						"          RetailPrice = RecommendedRetailPrice,",
						"          Size,",
						"          itemType",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectwwimporterscolumns",
						"derivedfinalcostandproducttype, wwimporterscolorsource lookup(wwimportsdbsource@ColorID == wwimporterscolorsource@ColorID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> wwimporterscolorslookup",
						"derivedproducttype split(itemType== 'Product',",
						"     disjoint: false) ~> advworkssplitclothesfromproducts@(advworksproducts, advworksclothing)",
						"selectwwimporterscolumns split(itemType == 'Product',",
						"     disjoint: false) ~> wwimporterssplitclothesfromproducts@(wwimportersproducts, wwimportersclothing)",
						"advworkssplitclothesfromproducts@advworksclothing, wwimporterssplitclothesfromproducts@wwimportersproducts exists(advworkssplitclothesfromproducts@advworksclothing@Name == wwimporterssplitclothesfromproducts@wwimportersproducts@Name,",
						"     negate:true,",
						"     broadcast: 'auto')~> checkrepeatedclothes",
						"checkrepeatedclothes, wwimporterssplitclothesfromproducts@wwimportersclothing union(byName: true)~> unionallclothes",
						"wwimporterssplitclothesfromproducts@wwimportersproducts, advworkssplitclothesfromproducts@advworksproducts union(byName: true)~> unionallproducts",
						"filterdiscontinued, advworkscheckmodel join(advworksdbsource@ProductModelID == advworkscheckmodel@ProductModelID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinmodel",
						"joinmodel aggregate(groupBy(ProductModelName),",
						"     AverageCost = avg(StandardCost)) ~> aggregatebyproductmodelname",
						"aggregatebyproductmodelname rank(desc(AverageCost, true),",
						"     caseInsensitive: true,",
						"     output(Rank as long),",
						"     dense: true) ~> rankbyavgprice",
						"windowclothes keyGenerate(output(ClothingID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> addpkclothes",
						"unionallproducts keyGenerate(output(ProductID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> addpkproducts",
						"addpkclothes alterRow(upsertIf(true())) ~> AlterRow1",
						"unionallclothes derive(Profitability = iif(unionallclothes@Cost==0, toDecimal(0), RetailPrice/unionallclothes@Cost)) ~> deriveprofitability",
						"deriveprofitability window(over(Size),",
						"     desc(Profitability, true),",
						"     Rank = denseRank()) ~> windowclothes",
						"wwimportersgetinvoiceevents parse(JsonData = ReturnedDeliveryData ? (ReceivedBy as string,",
						"          DeliveredWhen as date,",
						"          Events as string[]),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parsejsoncolumn",
						"parsejsoncolumn foldDown(unroll(JsonData.Events),",
						"     mapColumn(",
						"          InvoiceID,",
						"          ReceivedBy = JsonData.ReceivedBy,",
						"          DeliveredWhen = JsonData.DeliveredWhen,",
						"          Events = JsonData.Events",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flattenevents",
						"flattenevents parse(EventDetails = Events ? (Event as string,",
						"          EvenTime as date,",
						"          ConNote as string),",
						"     format: 'json',",
						"     documentForm: 'singleDocument') ~> parsejsonevents",
						"derivecomplexsubcolumns pivot(groupBy(InvoiceID,",
						"          ReceivedBy,",
						"          DeliveredWhen,",
						"          ComNoteCode),",
						"     pivotBy(EventName),",
						"     {} = first(EventTime),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivoteventdates",
						"parsejsonevents derive(EventName = EventDetails.Event,",
						"          EventTime = EventDetails.EvenTime,",
						"          ComNoteCode = EventDetails.ConNote) ~> derivecomplexsubcolumns",
						"pivoteventdates derive(DeliveryAttempt = toDate(byName('DeliveryAttempt')),",
						"          {Ready for collection} = toDate(byName('Ready for collection'))) ~> MapDriftedeventdates",
						"MapDriftedeventdates unpivot(output(",
						"          DeliveryEvent as string,",
						"          DeliveredWhen as date,",
						"          DeliveryAttempt as date,",
						"          {Ready for collection} as date",
						"     ),",
						"     ungroupBy(InvoiceID,",
						"          ReceivedBy,",
						"          ComNoteCode),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivoteventdates",
						"addpkproducts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name,",
						"          ColorID,",
						"          cost = unionallproducts@cost,",
						"          RetailPrice,",
						"          Size,",
						"          itemType,",
						"          Color",
						"     )) ~> MergeDBProductsSink",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Name'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Name,",
						"          Color,",
						"          Cost = unionallclothes@Cost,",
						"          RetailPrice,",
						"          Size,",
						"          itemType,",
						"          ColorID",
						"     )) ~> mergedbclothesink",
						"rankbyavgprice sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['RankProductModelByCost.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> advworksblobsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AdventureWorksProducts')]",
				"[concat(variables('factoryId'), '/datasets/ds_wwimportersstockitems')]",
				"[concat(variables('factoryId'), '/datasets/ds_mergedbproducts')]",
				"[concat(variables('factoryId'), '/datasets/ds_mergedbclothes')]",
				"[concat(variables('factoryId'), '/datasets/ds_advworksblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_sellout')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Destination_sellout_stocksales",
								"type": "DatasetReference"
							},
							"name": "stocksales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Destination_sellout_stocksales",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> stocksales",
						"stocksales sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Destination_sellout_stocksales')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_sup01')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup01",
								"type": "DatasetReference"
							},
							"name": "srcapisup1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "filiais",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (data as (bairro as string, cep as string, cidade as string, cnpj as long, codigo as short, complemento as string, {domicílio_fiscal} as string, logradouro as string, numero as string, razao_social as string, uf as string)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcapisup1",
						"srcapisup1 foldDown(unroll(body.data),",
						"     mapColumn(",
						"          bairro = body.data.bairro,",
						"          cep = body.data.cep,",
						"          cidade = body.data.cidade,",
						"          cnpj = body.data.cnpj,",
						"          codigo = body.data.codigo,",
						"          complemento = body.data.complemento,",
						"          {domicílio_fiscal} = body.data.{domicílio_fiscal},",
						"          logradouro = body.data.logradouro,",
						"          numero = body.data.numero,",
						"          razao_social = body.data.razao_social,",
						"          uf = body.data.uf",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          codigo as integer,",
						"          cnpj as string,",
						"          bairro as string,",
						"          cep as string,",
						"          cidade as string,",
						"          complemento as string,",
						"          domicilio_fiscal as string,",
						"          logradouro as string,",
						"          numero as string,",
						"          razao_social as string,",
						"          uf as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table sup01.filiais'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          bairro,",
						"          cep,",
						"          cidade,",
						"          cnpj,",
						"          codigo,",
						"          complemento,",
						"          {domicílio_fiscal},",
						"          logradouro,",
						"          numero,",
						"          razao_social,",
						"          uf",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sup01')]",
				"[concat(variables('factoryId'), '/datasets/filiais')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ud_demo2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ud_raw",
								"type": "DatasetReference"
							},
							"name": "sourcecustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ud_processed",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Column_1 as string,",
						"          Column_2 as string,",
						"          Column_3 as string,",
						"          Column_4 as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcecustomer",
						"sourcecustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['processedcustomerdata.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ud_example')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ud_raw",
								"type": "DatasetReference"
							},
							"name": "sourcecustom"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ud_processed",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as short,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcecustom",
						"sourcecustom sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_raw')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_processed')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ud_payment_details')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ud_sc73",
								"type": "DatasetReference"
							},
							"name": "sourceCustomers"
						},
						{
							"dataset": {
								"referenceName": "ds_ud_sec73_payments",
								"type": "DatasetReference"
							},
							"name": "sourcePayments"
						},
						{
							"dataset": {
								"referenceName": "ds_ud_sec73_orders",
								"type": "DatasetReference"
							},
							"name": "sourceOrders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ud_sec73_sinc",
								"type": "DatasetReference"
							},
							"name": "sinkPaymentDetails"
						}
					],
					"transformations": [
						{
							"name": "filterOnlyNonErrorData"
						},
						{
							"name": "filterCustomerAge20to70"
						},
						{
							"name": "selectRelevantCustomerFields"
						},
						{
							"name": "selectRelevantPaymentFields"
						},
						{
							"name": "selectRelevantColumnsOrders"
						},
						{
							"name": "joinCustomerOrder"
						},
						{
							"name": "join1"
						},
						{
							"name": "selectPaymentDetailsRequiredFIelds"
						},
						{
							"name": "pivotDueAmount"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pminage as integer,",
						"     pmaxage as integer",
						"}",
						"source(output(",
						"          customer_id as string,",
						"          Customerslastname as string,",
						"          Customersfirstname as string,",
						"          CustomersCountry as string,",
						"          Customersage as short,",
						"          Customersgender as string,",
						"          Customersemail as string,",
						"          Customersprofession as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCustomers",
						"source(output(",
						"          order_id as string,",
						"          payment_id as string,",
						"          type as string,",
						"          descriptions as string,",
						"          pDate as date 'dd/MM/yyyy',",
						"          Status as string,",
						"          Details as string,",
						"          Total_Invoice as short,",
						"          Due_Amount as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcePayments",
						"source(output(",
						"          order_id as string,",
						"          customer_id as string,",
						"          Store_id as string,",
						"          Date as date 'dd/MM/yyyy'",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceOrders",
						"sourcePayments filter(Status != \"error\" && (not(equals(Status, 'refunded')))) ~> filterOnlyNonErrorData",
						"sourceCustomers filter(Customersage>=$pminage && Customersage<=$pmaxage) ~> filterCustomerAge20to70",
						"filterCustomerAge20to70 select(mapColumn(",
						"          customer_id,",
						"          Customer_First_Name = Customersfirstname,",
						"          Customer_Last_Name = Customerslastname,",
						"          Customer_Country = CustomersCountry,",
						"          Customer_Age = Customersage",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantCustomerFields",
						"filterOnlyNonErrorData select(mapColumn(",
						"          payment_id,",
						"          order_id,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantPaymentFields",
						"sourceOrders select(mapColumn(",
						"          order_id,",
						"          customer_id,",
						"          Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantColumnsOrders",
						"selectRelevantCustomerFields, selectRelevantColumnsOrders join(selectRelevantCustomerFields@customer_id == selectRelevantColumnsOrders@customer_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinCustomerOrder",
						"joinCustomerOrder, selectRelevantPaymentFields join(selectRelevantColumnsOrders@order_id == selectRelevantPaymentFields@order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          customer_id = selectRelevantCustomerFields@customer_id,",
						"          Date,",
						"          Customer_First_Name,",
						"          Customer_Last_Name,",
						"          Customer_Country,",
						"          Customer_Age,",
						"          Status,",
						"          Due_Amount,",
						"          Total_Invoice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectPaymentDetailsRequiredFIelds",
						"selectPaymentDetailsRequiredFIelds pivot(groupBy(customer_id,",
						"          Date,",
						"          Customer_First_Name,",
						"          Customer_Last_Name,",
						"          Customer_Country,",
						"          Customer_Age,",
						"          Total_Invoice),",
						"     pivotBy(Status, ['received', 'not received']),",
						"     Due_amount = sum(Due_Amount),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivotDueAmount",
						"pivotDueAmount sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:[(concat(\"PaymentDetails\",toString($pminage),toString($pmaxage),\".csv\"))],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkPaymentDetails"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_sc73')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_sec73_payments')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_sec73_orders')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_sec73_sinc')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ud_scd_type1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_ud_dbdemosw01_tbluser",
								"type": "DatasetReference"
							},
							"name": "sourcedata"
						},
						{
							"dataset": {
								"referenceName": "ds_ud_dbdemosw02",
								"type": "DatasetReference"
							},
							"name": "destinationData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_ud_dbdemosw02",
								"type": "DatasetReference"
							},
							"name": "sinkData"
						},
						{
							"dataset": {
								"referenceName": "ds_ud_dbdemosw02",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "existsornot"
						},
						{
							"name": "existsornot1"
						},
						{
							"name": "alterRowdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourcedata",
						"source(output(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> destinationData",
						"sourcedata, destinationData exists(sourcedata@Key == destinationData@Key,",
						"     negate:true,",
						"     broadcast: 'auto')~> existsornot",
						"sourcedata, destinationData exists(sourcedata@Key == destinationData@Key,",
						"     negate:false,",
						"     broadcast: 'auto')~> existsornot1",
						"existsornot1 alterRow(updateIf(true())) ~> alterRowdata",
						"existsornot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          Key,",
						"          Name,",
						"          Phone,",
						"          Last_m",
						"     )) ~> sinkData",
						"alterRowdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Key as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw01_tbluser')]",
				"[concat(variables('factoryId'), '/datasets/ds_ud_dbdemosw02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_ud_sec97_EmployeeSalesDetails')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceDepartments"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceRegionData"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesNA"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesSA"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_source",
								"type": "LinkedServiceReference"
							},
							"name": "sourceSalesEAA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_ud_destination",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTotalSalesYear"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_destination",
								"type": "LinkedServiceReference"
							},
							"name": "SummaryEmployeeSalesSAcsv"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_destination",
								"type": "LinkedServiceReference"
							},
							"name": "SummaryEmployeeSalesNAcsv"
						},
						{
							"linkedService": {
								"referenceName": "ls_ud_destination",
								"type": "LinkedServiceReference"
							},
							"name": "SummaryEmployeeSalesEAAcsv"
						}
					],
					"transformations": [
						{
							"name": "unionSalesDataSANA"
						},
						{
							"name": "unionSalesAll"
						},
						{
							"name": "unpivotSalesData"
						},
						{
							"name": "derivedColumnSalesYear"
						},
						{
							"name": "EmployeewithAdditionalColumns"
						},
						{
							"name": "selectRelevantEmployeeFields"
						},
						{
							"name": "selectRelevantDepartmentFields"
						},
						{
							"name": "selectRelevantRegionFields"
						},
						{
							"name": "lookupEmployeeDepartments"
						},
						{
							"name": "lookupEmployeeDepartmentRegion"
						},
						{
							"name": "joinEmployeeSalesData"
						},
						{
							"name": "selectEmployeeSalesDataRelevantFields"
						},
						{
							"name": "SummaryEmployeeSalesRegion"
						},
						{
							"name": "TotalSalesPerYear"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_id as integer,",
						"          store_id as string,",
						"          department_id as integer,",
						"          firstname as string,",
						"          lastname as string,",
						"          Country as string,",
						"          age as integer,",
						"          gender as string,",
						"          email as string,",
						"          phone as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceEmployee",
						"source(output(",
						"          department_id as short,",
						"          Department as string,",
						"          Phone as integer,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceDepartments",
						"source(output(",
						"          region_id as short,",
						"          region as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Region.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceRegionData",
						"source(output(",
						"          Employee_id as short,",
						"          Sales_2018 as short,",
						"          Sales_2019 as short,",
						"          Sales_2020 as short,",
						"          Sales_2021 as short,",
						"          Sales_2022 as short,",
						"          Sales_2023 as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Sales_NA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesNA",
						"source(output(",
						"          Employee_id as short,",
						"          Sales_2018 as short,",
						"          Sales_2019 as short,",
						"          Sales_2020 as short,",
						"          Sales_2021 as short,",
						"          Sales_2022 as short,",
						"          Sales_2023 as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Sales_SA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesSA",
						"source(output(",
						"          Employee_id as short,",
						"          Sales_2018 as short,",
						"          Sales_2019 as short,",
						"          Sales_2020 as short,",
						"          Sales_2021 as short,",
						"          Sales_2022 as short,",
						"          Sales_2023 as short",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     fileName: 'Sales_EAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> sourceSalesEAA",
						"sourceSalesNA, sourceSalesSA union(byName: true)~> unionSalesDataSANA",
						"unionSalesDataSANA, sourceSalesEAA union(byName: false)~> unionSalesAll",
						"unionSalesAll unpivot(output(",
						"          Year as string,",
						"          Sales as short",
						"     ),",
						"     ungroupBy(Employee_id),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivotSalesData",
						"unpivotSalesData derive(Year = toInteger(right(Year,4))) ~> derivedColumnSalesYear",
						"sourceEmployee derive(Employee_Full_Name = concat(firstname,' ',lastname),",
						"          Employee_Country = split(Country,', ')[1],",
						"          Employee_Region_ID = split(Country, ', ')[2]) ~> EmployeewithAdditionalColumns",
						"EmployeewithAdditionalColumns select(mapColumn(",
						"          Employee_id,",
						"          department_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantEmployeeFields",
						"sourceDepartments select(mapColumn(",
						"          department_id,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantDepartmentFields",
						"sourceRegionData select(mapColumn(",
						"          Employee_region_id = region_id,",
						"          Employee_region = region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectRelevantRegionFields",
						"selectRelevantEmployeeFields, selectRelevantDepartmentFields lookup(selectRelevantEmployeeFields@department_id == selectRelevantDepartmentFields@department_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEmployeeDepartments",
						"lookupEmployeeDepartments, selectRelevantRegionFields lookup(toShort(selectRelevantEmployeeFields@Employee_Region_ID) == selectRelevantRegionFields@Employee_region_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookupEmployeeDepartmentRegion",
						"lookupEmployeeDepartmentRegion, derivedColumnSalesYear join(selectRelevantEmployeeFields@Employee_id == unpivotSalesData@Employee_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmployeeSalesData",
						"joinEmployeeSalesData select(mapColumn(",
						"          Employee_id = selectRelevantEmployeeFields@Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_region,",
						"          Year,",
						"          Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectEmployeeSalesDataRelevantFields",
						"selectEmployeeSalesDataRelevantFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_region),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> SummaryEmployeeSalesRegion",
						"selectEmployeeSalesDataRelevantFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Year),",
						"     Total_Sales = sum(Sales),",
						"          Avg_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> TotalSalesPerYear",
						"SummaryEmployeeSalesRegion split(Employee_region == 'South America',",
						"     Employee_region == 'North America',",
						"     disjoint: false) ~> split1@(SummaryEmployeeSalesSA, SummaryEmployeeSalesNA, SummaryEmployeeSalesEAA)",
						"TotalSalesPerYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['TotalSalesYear.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkTotalSalesYear",
						"split1@SummaryEmployeeSalesSA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SummaryEmployeeSalesSA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SummaryEmployeeSalesSAcsv",
						"split1@SummaryEmployeeSalesNA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SummaryEmployeeSalesNA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SummaryEmployeeSalesNAcsv",
						"split1@SummaryEmployeeSalesEAA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'udemyadf',",
						"     folderPath: 'sec97',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SummaryEmployeeSalesEAA.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SummaryEmployeeSalesEAAcsv"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_source')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_ud_destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfsup02')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup02",
								"type": "DatasetReference"
							},
							"name": "srcsup02"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pdatai as string,",
						"     pdataf as string",
						"}",
						"source(output(",
						"          body as (continuationToken as string, data as (cnpj as long, data_documento as date, data_venda as date, direcao_movimento as short, documento_estornado as boolean, ean_principal as long, moeda as string, nota_fiscal as integer, numero_documento as integer, preco_interno as double, quantidade_ordem as integer, serie_fiscal as short, sku_id as string, tipo_documento as short, tipo_pessoa as boolean, valor_bruto as double, valor_liquido as double, venda_online as boolean)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcsup02",
						"srcsup02 foldDown(unroll(body.data),",
						"     mapColumn(",
						"          cnpj = body.data.cnpj,",
						"          data_documento = body.data.data_documento,",
						"          data_venda = body.data.data_venda,",
						"          direcao_movimento = body.data.direcao_movimento,",
						"          documento_estornado = body.data.documento_estornado,",
						"          ean_principal = body.data.ean_principal,",
						"          moeda = body.data.moeda,",
						"          nota_fiscal = body.data.nota_fiscal,",
						"          numero_documento = body.data.numero_documento,",
						"          preco_interno = body.data.preco_interno,",
						"          quantidade_ordem = body.data.quantidade_ordem,",
						"          serie_fiscal = body.data.serie_fiscal,",
						"          sku_id = body.data.sku_id,",
						"          tipo_documento = body.data.tipo_documento,",
						"          tipo_pessoa = body.data.tipo_pessoa,",
						"          valor_bruto = body.data.valor_bruto,",
						"          valor_liquido = body.data.valor_liquido,",
						"          venda_online = body.data.venda_online,",
						"          success = body.success,",
						"          totalRecords = body.totalRecords",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          data_documento as date,",
						"          data_venda as date,",
						"          direcao_movimento as integer,",
						"          documento_estornado as string,",
						"          moeda as string,",
						"          nota_fiscal as integer,",
						"          numero_documento as integer,",
						"          preco_interno as double,",
						"          quantidade_ordem as string,",
						"          serie_fiscal as integer,",
						"          sku_id as string,",
						"          tipo_documento as integer,",
						"          tipo_pessoa as string,",
						"          valor_bruto as double,",
						"          valor_liquido as double,",
						"          venda_online as string,",
						"          cnpj as string,",
						"          ean_principal as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['cnpj','direcao_movimento','nota_fiscal','numero_documento','serie_fiscal','ean_principal','tipo_documento'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          cnpj,",
						"          data_documento,",
						"          data_venda,",
						"          direcao_movimento,",
						"          ean_principal,",
						"          moeda,",
						"          nota_fiscal,",
						"          numero_documento,",
						"          preco_interno,",
						"          serie_fiscal,",
						"          sku_id,",
						"          tipo_documento,",
						"          valor_bruto,",
						"          valor_liquido,",
						"          quantidade_ordem",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sup02')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfsup03')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup03",
								"type": "DatasetReference"
							},
							"name": "srcsup03",
							"description": "Import data from ds_sup03"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_sup03",
								"type": "DatasetReference"
							},
							"name": "sinkestoque"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pdata as string,",
						"     cnpj as string",
						"}",
						"source(output(",
						"          body as (continuationToken as string, data as (data_movimento as date, deposito as short, ean_principal as long, parceiro as short, quantidade as short, sku_id as string)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcsup03",
						"srcsup03 foldDown(unroll(body.data),",
						"     mapColumn(",
						"          data_movimento = body.data.data_movimento,",
						"          deposito = body.data.deposito,",
						"          ean_principal = body.data.ean_principal,",
						"          parceiro = body.data.parceiro,",
						"          quantidade = body.data.quantidade,",
						"          sku_id = body.data.sku_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(cnpj = toString($cnpj)) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cnpj as string,",
						"          ean_principal as string,",
						"          deposito as string,",
						"          parceiro as integer,",
						"          quantidade as integer,",
						"          sku_id as string,",
						"          data_movimento as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ean_principal,",
						"          deposito,",
						"          parceiro,",
						"          quantidade,",
						"          sku_id,",
						"          data_movimento,",
						"          cnpj",
						"     )) ~> sinkestoque"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sup03')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_sup03')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfsupestoque')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup03",
								"type": "DatasetReference"
							},
							"name": "srcsupestoque"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_sup03",
								"type": "DatasetReference"
							},
							"name": "sinkestoque"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     dfpcnpj as string",
						"}",
						"source(output(",
						"          body as (continuationToken as string, data as (data_movimento as date, deposito as short, ean_principal as long, parceiro as short, quantidade as short, sku_id as string)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcsupestoque",
						"srcsupestoque foldDown(unroll(body.data),",
						"     mapColumn(",
						"          data_movimento = body.data.data_movimento,",
						"          deposito = body.data.deposito,",
						"          ean_principal = body.data.ean_principal,",
						"          parceiro = body.data.parceiro,",
						"          quantidade = body.data.quantidade,",
						"          sku_id = body.data.sku_id",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 derive(cnpj = $dfpcnpj) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          cnpj as string,",
						"          ean_principal as string,",
						"          deposito as string,",
						"          parceiro as integer,",
						"          quantidade as integer,",
						"          sku_id as string,",
						"          data_movimento as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['cnpj','ean_principal','deposito'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          cnpj,",
						"          ean_principal,",
						"          deposito,",
						"          parceiro,",
						"          quantidade,",
						"          sku_id,",
						"          data_movimento",
						"     )) ~> sinkestoque"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sup03')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_sup03')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/credential1')]",
			"type": "Microsoft.DataFactory/factories/credentials",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {
					"resourceId": "/subscriptions/27e49bd9-fbfb-4a0e-bd36-933bf4ee5996/resourceGroups/RG-LATAM-App-01-Test-Data/providers/Microsoft.ManagedIdentity/userAssignedIdentities/mi_adm-weigesan"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_git_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}