{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "dfsw001"
		},
		"tr_process_formula1_properties_pipeline_parameters_p_windows_end_date": {
			"type": "string",
			"defaultValue": "@trigger().outputs.WindowEndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ppl_gfkbrazil_weekly')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "queries the weekly gfk brazil temporarily from datalabbrasil",
				"activities": [
					{
						"name": "gfkbrazil_weekly",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "\n\tselect top(10000)\n\t\t'competitors_gfkbrazil_weekly' as Origin, \n\t\t'BR10' as Sales_Org,\n\t\tcast(gs.[DtSemana] as date) as Date,\n\t\tTipo as Region,\n\t\tnull as Seller,\n\t\tnull as '5NO',\n\t\tnull as MeioDeDivulgacao,\n\t\tgs.MarcaGFK  as Brand,\n\t\tgs.GrupoProdutoGFK  as Product_Group,\n\t\tgs.Modelo as Product,\n\t\tdgl.Item_LCM as Product_LCM,\n\t\tdgl.Corte_LCM as Corte_LCM,\n\t\tdgl.Tracking_Model_LCM as Tracking_Model_LCM,\n\t\t[KPI] as KPI, \n\t\tround(gs.[Value], 5) as Value\n\tfrom DatalabBrasilDW.dbo.GfkBrasilSemanal as gs\n\tleft join DatalabBrasil.dbo.DP_GFKBrasil_LCM dgl on dgl.Item_GFK = gs.Modelo \n\twhere 1=1\n\t\tand gs.KPI in ('Sales Units', 'Sales Value', 'Sales Value BRL ', 'Unw. Avg. Distribution Total', 'Wgt. Avg. Distribution Total')\n\t\tand gs.MarcaGFK not in ('<Tradebrand & Exclusive>')\n\t\tand gs.[Pais] = 'Brazil'\n\t\tand cast(gs.[DtSemana] as date) >= dateadd(month, -3, CURRENT_TIMESTAMP)\n\t\t--and gs.Tipo in ('Internet', 'Traditional', '<Grand Total>')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Sales_Org",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Date",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "Date",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Region",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Region",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Seller",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "Seller",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "5NO",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "MeioDeDivulgacao",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "MeioDeDivulgacao",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Brand",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Brand",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_Group",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Product_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Corte_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "Tracking_Model_LCM",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "KPI",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "KPI",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Value",
											"type": "Double",
											"physicalType": "float"
										},
										"sink": {
											"name": "Value",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_gfkbrazil_weekly",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-20T13:26:53Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_shoppingbrasildiario')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Daily data refresh for ShoppingBrasilMensal and SelloutMensal tables.",
				"activities": [
					{
						"name": "ShoppingBrasilDiario",
						"description": "SQL query that brings the last 24 months of ShoppingBrasilDIario data to Zilliant SFTP.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/ShoppingBrasilMensal"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "with rn as(\nselect \n\t\tROW_NUMBER() OVER( PARTITION BY [DataInicial], [UF], [Marca], [Categoria], [Modelo] ORDER BY [Modelo] ASC) as a,\n\t    'competitors_shoppingbrasil_daily' as Origin,\n\t    'BR10' as Sales_Org,\n\t\tcast([DataInicial] as date) as Date,\t    \n\t\tUF as Region,\n\t\tLoja as Seller,\n\t\tnull as '5NO',\n\t\tVeiculo as MeioDeDivulgacao,\n\t    [Marca] as Brand,\n\t    [Categoria] as Product_Group,\n\t    Modelo as Product,\n\t    null as Product_LCM,\n\t    null as Corte_LCM, \n\t    null as Tracking_Model_LCM, \n\t    'Price BRL' as KPI,\n\t    PrecoAVista as 'Value'\n\tfrom DatalabBrasilDW.dbo.ShoppingBrasilDiario sbd \n\twhere 1=1\n\t\tand [DataInicial] >= dateadd(month, -6, CURRENT_TIMESTAMP)\n\t\t)\n\tselect origin, sales_org, date, region, seller, null as '5NO', meiodedivulgacao, brand, product_group, product, product_lcm, corte_lcm, tracking_model_lcm, kpi, value from rn\n\twhere rn.a = 1",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_shopbrasildiario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T11:35:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_shoppingbrasilmensal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Monthly data refresh for ShoppingBrasilMensal and SelloutMensal tables.",
				"activities": [
					{
						"name": "ShoppingBrasilMensal",
						"description": "SQL query that brings the last 24 months of ShoppingBrasilMensal data to Zilliant SFTP.",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "."
							},
							{
								"name": "Destination",
								"value": "/INPUT/competitors_shoppingbrasilmensal.csv"
							}
						],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "with rn as(\nselect \n\t\tROW_NUMBER() OVER( PARTITION BY [Periodo], [UF], [Marca], [Categoria], [Modelo] ORDER BY [Modelo] ASC) as a,\n\t    'competitors_shoppingbrasil_monthly' as Origin,\n\t    'BR10' as Sales_Org,\n\t\tcast(Periodo as date) as Date,\t    \n\t\tUF as Region,\n\t\tLoja as Seller,\n\t\tnull as '5NO',\n\t\tVeiculo as MeioDeDivulgacao,\n\t    [Marca] as Brand,\n\t    [Categoria] as Product_Group,\n\t    Modelo  as Product,\n\t    null as Product_LCM,\n\t    null as Corte_LCM, \n\t    null as Tracking_Model_LCM, \n\t    'Sales Value BRL' as KPI,\n\t\tMenorPrecoAvista as Value\n\tfrom DatalabBrasilDW.dbo.ShoppingBrasilMensal sbm\n\twhere 1=1\n\t\tand Periodo >= dateadd(month, -3, CURRENT_TIMESTAMP)\n\t\t)\n\tselect origin, sales_org, date, region, seller, null as '5NO', meiodedivulgacao, brand, product_group, product, product_lcm, corte_lcm, tracking_model_lcm, kpi, value from rn\n\twhere rn.a = 1",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "SftpWriteSettings",
									"operationTimeout": "01:00:00",
									"useTempFileRename": false
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "origin",
											"type": "String"
										},
										"sink": {
											"name": "origin",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sales_org",
											"type": "String"
										},
										"sink": {
											"name": "sales_org",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "DateTime"
										},
										"sink": {
											"name": "date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "region",
											"type": "String"
										},
										"sink": {
											"name": "region",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "seller",
											"type": "String"
										},
										"sink": {
											"name": "seller",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "5NO",
											"type": "Int32"
										},
										"sink": {
											"name": "5NO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "meiodedivulgacao",
											"type": "String"
										},
										"sink": {
											"name": "meiodedivulgacao",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "brand",
											"type": "String"
										},
										"sink": {
											"name": "brand",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_group",
											"type": "String"
										},
										"sink": {
											"name": "product_group",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product",
											"type": "String"
										},
										"sink": {
											"name": "product",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "product_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "corte_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "corte_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "tracking_model_lcm",
											"type": "Int32"
										},
										"sink": {
											"name": "tracking_model_lcm",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "kpi",
											"type": "String"
										},
										"sink": {
											"name": "kpi",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "value",
											"type": "Double"
										},
										"sink": {
											"name": "value",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DatalabBrasil",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Destination_shopbrasilmensal",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Dev_Zilliant_Competitors"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-16T11:39:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_supestoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select cnpj from [sup01].[filiais]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_sup01_filiais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Dfsupestoque",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dfsupestoque",
											"type": "DataFlowReference",
											"parameters": {
												"dfpcnpj": {
													"value": "'@{item().cnpj}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"srcsupestoque": {
													"cnpj": {
														"value": "@item().cnpj",
														"type": "Expression"
													}
												},
												"sinkestoque": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-10T18:46:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_demodataflow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_example",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecustom": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T18:31:38Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_df_demo2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_demo2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcecustomer": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T19:05:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_paymentDetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_paymentDetails",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_payment_details",
								"type": "DataFlowReference",
								"parameters": {
									"pminage": {
										"value": "@pipeline().parameters.minage",
										"type": "Expression"
									},
									"pmaxage": {
										"value": "@pipeline().parameters.maxage",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"sourceCustomers": {},
									"sourcePayments": {},
									"sourceOrders": {},
									"sinkPaymentDetails": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"minage": {
						"type": "int"
					},
					"maxage": {
						"type": "int"
					}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-17T18:47:50Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_ud_scd_type1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_ud_scd_type1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourcedata": {},
									"destinationData": {},
									"sinkData": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Udemy"
				},
				"annotations": [],
				"lastPublishTime": "2023-03-09T13:54:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_sup01')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup01",
								"type": "DatasetReference"
							},
							"name": "srcapisup1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "filiais",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          body as (data as (bairro as string, cep as string, cidade as string, cnpj as long, codigo as short, complemento as string, {domicílio_fiscal} as string, logradouro as string, numero as string, razao_social as string, uf as string)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcapisup1",
						"srcapisup1 foldDown(unroll(body.data),",
						"     mapColumn(",
						"          bairro = body.data.bairro,",
						"          cep = body.data.cep,",
						"          cidade = body.data.cidade,",
						"          cnpj = body.data.cnpj,",
						"          codigo = body.data.codigo,",
						"          complemento = body.data.complemento,",
						"          {domicílio_fiscal} = body.data.{domicílio_fiscal},",
						"          logradouro = body.data.logradouro,",
						"          numero = body.data.numero,",
						"          razao_social = body.data.razao_social,",
						"          uf = body.data.uf",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          codigo as integer,",
						"          cnpj as string,",
						"          bairro as string,",
						"          cep as string,",
						"          cidade as string,",
						"          complemento as string,",
						"          domicilio_fiscal as string,",
						"          logradouro as string,",
						"          numero as string,",
						"          razao_social as string,",
						"          uf as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table sup01.filiais'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          bairro,",
						"          cep,",
						"          cidade,",
						"          cnpj,",
						"          codigo,",
						"          complemento,",
						"          {domicílio_fiscal},",
						"          logradouro,",
						"          numero,",
						"          razao_social,",
						"          uf",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfsup02')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_sup02",
								"type": "DatasetReference"
							},
							"name": "srcsup02"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flatten1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     pdatai as string,",
						"     pdataf as string",
						"}",
						"source(output(",
						"          body as (continuationToken as string, data as (cnpj as long, data_documento as date, data_venda as date, direcao_movimento as short, documento_estornado as boolean, ean_principal as long, moeda as string, nota_fiscal as integer, numero_documento as integer, preco_interno as double, quantidade_ordem as integer, serie_fiscal as short, sku_id as string, tipo_documento as short, tipo_pessoa as boolean, valor_bruto as double, valor_liquido as double, venda_online as boolean)[], success as boolean, totalRecords as short),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> srcsup02",
						"srcsup02 foldDown(unroll(body.data),",
						"     mapColumn(",
						"          cnpj = body.data.cnpj,",
						"          data_documento = body.data.data_documento,",
						"          data_venda = body.data.data_venda,",
						"          direcao_movimento = body.data.direcao_movimento,",
						"          documento_estornado = body.data.documento_estornado,",
						"          ean_principal = body.data.ean_principal,",
						"          moeda = body.data.moeda,",
						"          nota_fiscal = body.data.nota_fiscal,",
						"          numero_documento = body.data.numero_documento,",
						"          preco_interno = body.data.preco_interno,",
						"          quantidade_ordem = body.data.quantidade_ordem,",
						"          serie_fiscal = body.data.serie_fiscal,",
						"          sku_id = body.data.sku_id,",
						"          tipo_documento = body.data.tipo_documento,",
						"          tipo_pessoa = body.data.tipo_pessoa,",
						"          valor_bruto = body.data.valor_bruto,",
						"          valor_liquido = body.data.valor_liquido,",
						"          venda_online = body.data.venda_online,",
						"          success = body.success,",
						"          totalRecords = body.totalRecords",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> flatten1",
						"flatten1 alterRow(upsertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          data_documento as date,",
						"          data_venda as date,",
						"          direcao_movimento as integer,",
						"          documento_estornado as string,",
						"          moeda as string,",
						"          nota_fiscal as integer,",
						"          numero_documento as integer,",
						"          preco_interno as double,",
						"          quantidade_ordem as string,",
						"          serie_fiscal as integer,",
						"          sku_id as string,",
						"          tipo_documento as integer,",
						"          tipo_pessoa as string,",
						"          valor_bruto as double,",
						"          valor_liquido as double,",
						"          venda_online as string,",
						"          cnpj as string,",
						"          ean_principal as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:true,",
						"     keys:['cnpj','direcao_movimento','nota_fiscal','numero_documento','serie_fiscal','ean_principal','tipo_documento'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          cnpj,",
						"          data_documento,",
						"          data_venda,",
						"          direcao_movimento,",
						"          ean_principal,",
						"          moeda,",
						"          nota_fiscal,",
						"          numero_documento,",
						"          preco_interno,",
						"          serie_fiscal,",
						"          sku_id,",
						"          tipo_documento,",
						"          valor_bruto,",
						"          valor_liquido,",
						"          quantidade_ordem",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sup01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dfsup01",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_sup01",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srcapisup1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-11-01T17:26:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_sup01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sup02')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select cnpj from [sup01].[filiais]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Azure_sup01_filiais",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "dfsup02",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "dfsup02",
											"type": "DataFlowReference",
											"parameters": {
												"pdatai": {
													"value": "'@{formatDateTime(subtractFromTime(utcNow(),60,'Day'),'yyyy-MM-dd')}'",
													"type": "Expression"
												},
												"pdataf": {
													"value": "'@{formatDateTime(subtractFromTime(utcNow(),1,'Day'),'yyyy-MM-dd')}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"srcsup02": {
													"cnpj": {
														"value": "@item().cnpj",
														"type": "Expression"
													}
												},
												"sink1": {}
											}
										},
										"staging": {},
										"integrationRuntime": {
											"referenceName": "integrationRuntime1",
											"type": "IntegrationRuntimeReference"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"cnpj": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-03T19:39:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dfsup02')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_process_formula1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_process_formula1_data",
						"type": "PipelineReference"
					},
					"parameters": {
						"p_windows_end_date": "[parameters('tr_process_formula1_properties_pipeline_parameters_p_windows_end_date')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 168,
					"startTime": "2022-05-22T10:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ppl_sipolatti')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get cnpj",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_sup01",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "get movimento",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get cnpj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_sup02",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "get estoque",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get cnpj",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ppl_supestoque",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-01-24T17:00:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppl_sup01')]",
				"[concat(variables('factoryId'), '/pipelines/ppl_sup02')]",
				"[concat(variables('factoryId'), '/pipelines/ppl_supestoque')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger Sipolati')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "ppl_sipolatti",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2023-02-06T04:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/ppl_sipolatti')]"
			]
		}
	]
}